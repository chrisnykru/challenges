/*

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

*/

#![feature(test)]
extern crate test;

pub struct FibIter {
	i: u64,
	i_next: u64,
}

pub fn fib() -> FibIter{
	FibIter{
		i: 0,
		i_next: 1,
	}
}

impl Iterator for FibIter {
	type Item=u64;
	fn next(&mut self) -> Option<u64> {
		let old_i = self.i;
		self.i = self.i_next;
		self.i_next += old_i;
		Some(old_i)
	}
}

pub fn solve(max: u64) -> u64 {
	let mut sum = 0;
	let mut it = fib();
	while let Some(term) = it.next() {
		if term >= max {
			break;
		} else if term % 2 == 0 {
			sum += term;
		}
	}
	sum
}

#[cfg(test)]
mod tests {
    use super::*;
    use test::Bencher;

    #[test]
    fn it_works() {
    	let mut it = fib();
    	assert_eq!(0, it.next().unwrap());
    	assert_eq!(1, it.next().unwrap());
    	assert_eq!(1, it.next().unwrap());
    	assert_eq!(2, it.next().unwrap());
    	assert_eq!(3, it.next().unwrap());
    	assert_eq!(5, it.next().unwrap());
    	assert_eq!(8, it.next().unwrap());
    	assert_eq!(13, it.next().unwrap());

    	assert_eq!(4613732, solve(4000000));
    }

    #[bench]
    fn bench_sum_even_terms(b: &mut Bencher) {
        b.iter(|| solve(4000000));
    }
}
