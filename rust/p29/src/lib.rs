/*
 * Distinct powers
 *
 * Consider all integer combinations of a^b for 2<=a<=5 and 2<=b<=5:
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 *
 * If they are then placed in numerical order, with any repeats removed, we get
 * the following sequence of 15 distinct terms:
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 *
 * How many distinct terms are in the sequence generated by a^b
 * for 2<=a<=100 and 2<=b<=100?
 */
extern crate num;
use std::collections::HashSet;
use num::bigint::{ToBigUint};

pub fn bigintpow(base: &num::BigUint, exp: &num::BigUint) -> num::BigUint {
    let one = 1.to_biguint().unwrap();

    let mut tmp_exp = exp.clone();
    let mut x = base.clone();
    while tmp_exp > one {
        x = x * base.clone();
        tmp_exp = tmp_exp.clone() - &one;
    }
    x
}

pub fn solve(amin: usize, amax: usize, bmin: usize, bmax: usize) -> usize {
    let mut h: HashSet<num::BigUint> = HashSet::new();
    for a in amin..amax + 1 {
        for b in bmin..bmax + 1 {
            let x = bigintpow(&a.to_biguint().unwrap(), &b.to_biguint().unwrap());
            h.insert(x);
        }
    }
    h.len()
}

#[test]
fn test_bigintpow() {
    assert_eq!(bigintpow(&2.to_biguint().unwrap(), &3.to_biguint().unwrap()), 8.to_biguint().unwrap());
    assert_eq!(bigintpow(&10.to_biguint().unwrap(), &2.to_biguint().unwrap()), 100.to_biguint().unwrap());
    let z = num::BigUint::parse_bytes(b"10000000000", 10).unwrap();
    assert_eq!(bigintpow(&10.to_biguint().unwrap(), &10.to_biguint().unwrap()), z);
}

#[test]
fn it_works() {
    assert_eq!(solve(2,5,2,5), 15);
    assert_eq!(solve(2,100,2,100), 9183);
}
