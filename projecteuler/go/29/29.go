/*

Distinct powers

Consider all integer combinations of a^b for 2<=a<=5 and 2<=b<=5:
  22=4, 23=8, 24=16, 25=32
  32=9, 33=27, 34=81, 35=243
  42=16, 43=64, 44=256, 45=1024
  52=25, 53=125, 54=625, 55=3125

If they are then placed in numerical order, with any repeats removed, we get
the following sequence of 15 distinct terms:
  4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b
for 2<=a<=100 and 2<=b<=100?

*/
package main

import (
	"fmt"
	"math/big"
)

// 100^100 > uint64 max
func termMap(amin, amax, bmin, bmax int) map[string]bool {
	m := make(map[string]bool)

	// a^b
	for a := amin; a <= amax; a++ {
		for b := bmin; b <= bmax; b++ {
			x := big.NewInt(int64(a))
			term := new(big.Int).Exp(x, big.NewInt(int64(b)), nil)
			//if _, ok := m[term.String()]; !ok {
			//}

			// overwrite ok
			m[term.String()] = false // arbitrary
		}
	}
	return m
}

func main() {
	//m := termMap(2,5,2,5)
	m := termMap(2, 100, 2, 100)
	fmt.Println(len(m))
}
