/*

Pentagon numbers

Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2.
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of D?

*/
package main

import (
	"fmt"
)

func pentagonal(n uint) uint {
	return n * (3*n - 1) / 2
}

func pinverse() func(x uint) (n uint, ok bool) {
	// P(n) --> n
	inverseMap := make(map[uint]uint)
	// initial entry
	highN, highP := uint(1), pentagonal(1)
	inverseMap[highP] = highN

	return func(x uint) (n uint, ok bool) {
		for highP < x {
			highN++
			highP = pentagonal(highN)
			inverseMap[highP] = highN
		}
		n, ok = inverseMap[x]
		return
	}
}

func minDiff() uint {
	pinv := pinverse()

	// j,k order:
	//   1,1  2,1  2,2
	for j := uint(1); ; j++ {
		for k := uint(1); k <= j; k++ {
			pj := pentagonal(j)
			pk := pentagonal(k)
			sum := pj + pk
			if _, ok := pinv(sum); !ok {
				continue
			}

			diff := pj - pk
			if n3, ok := pinv(diff); ok {
				fmt.Printf("P(%d) - P(%d) = %v, a.k.a. P(%d)\n", j, k, diff, n3)
				return diff
			}
		}
	}
	panic("unexpected")
}

func main() {
	fmt.Println(minDiff())
}
