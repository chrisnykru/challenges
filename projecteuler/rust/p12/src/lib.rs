/*
 * Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 *
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

use std::collections::HashSet;

struct TriangleGen {
    x: usize,
    sum: usize,
}

impl TriangleGen {
    fn new() -> TriangleGen {
        TriangleGen { x: 1, sum: 0 }
    }

    fn next(&mut self) -> usize {
        self.sum += self.x;
        self.x += 1;
        self.sum
    }
}

fn divisors(x: usize) -> HashSet<usize> {
    let mut res = HashSet::new();
    res.insert(1);
    res.insert(x);
    let sqrt = (x as f64).sqrt().floor() as usize;
    for i in 2..(sqrt + 1) {
        if x % i == 0 {
            res.insert(i);
            res.insert(x / i);
        }
    }
    res
}

pub fn solve(numdiv: usize) -> usize {
    let mut tg = TriangleGen::new();
    loop {
        let n = tg.next();
        let d = divisors(n);
        if d.len() > numdiv {
            return n;
        }
    }
}

#[test]
fn test_triangle_gen() {
    let mut tg = TriangleGen::new();
    assert_eq!(1, tg.next());
    assert_eq!(3, tg.next());
    assert_eq!(6, tg.next());
    assert_eq!(10, tg.next());
    assert_eq!(15, tg.next());
    assert_eq!(21, tg.next());
    assert_eq!(28, tg.next());
}

#[test]
fn test_divisors() {
    let r: HashSet<_> = [1].iter().cloned().collect();
    assert_eq!(r, divisors(1));

    let r: HashSet<_> = [1, 2].iter().cloned().collect();
    assert_eq!(r, divisors(2));

    let r: HashSet<_> = [1, 3].iter().cloned().collect();
    assert_eq!(r, divisors(3));

    let r: HashSet<_> = [1, 2, 3, 6].iter().cloned().collect();
    assert_eq!(r, divisors(6));

    let r: HashSet<_> = [1, 2, 5, 10].iter().cloned().collect();
    assert_eq!(r, divisors(10));

    let r: HashSet<_> = [1, 3, 5, 15].iter().cloned().collect();
    assert_eq!(r, divisors(15));

    let r: HashSet<_> = [1, 3, 7, 21].iter().cloned().collect();
    assert_eq!(r, divisors(21));

    let r: HashSet<_> = [1, 2, 4, 7, 14, 28].iter().cloned().collect();
    assert_eq!(r, divisors(28));
}

#[test]
fn it_works() {
    assert_eq!(28, solve(5));
    assert_eq!(76576500, solve(500));
}
